{"version":3,"file":"static/js/387.7318b004.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAGHC,EAAa,mCAAG,sGACJF,EAAAA,EAAAA,IAAA,qCACSC,EADT,YADI,uBACnBE,EADmB,EACnBA,KADmB,kBAIpBA,GAJoB,2CAAH,qDAObC,EAAiB,mCAAG,WAAMC,GAAN,yFACRL,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBI,IAFZ,uBACvBF,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,sDAQjBG,EAAiB,mCAAG,WAAMC,GAAN,yFACRP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,oBAAiCN,IADzB,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBK,EAAiB,mCAAG,WAAMD,GAAN,yFACRP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,4BAAyCN,IADjC,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBM,EAAiB,mCAAG,WAAMF,GAAN,yFACRP,EAAAA,EAAAA,IAAA,gBACZO,EADY,4BACUN,EADV,aADQ,uBACvBE,EADuB,EACvBA,KADuB,kBAIxBA,EAAKO,SAJmB,2CAAH,qD,oKC9BjBC,EAAeC,EAAAA,GAAAA,IAAH,0DAIZC,EAAYD,EAAAA,GAAAA,GAAH,6C,6BCiDtB,EAhDa,WACX,OAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQX,GAAOY,EAAAA,EAAAA,MAAPZ,GA2BR,OAzBAa,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIF,GAAW,GAFf,UAI2BV,EAAAA,EAAAA,IAAkBD,GAJ7C,gBAIYc,EAJZ,EAIYA,KACRL,EAAYK,GALhB,gDAOIC,EAAAA,GAAAA,MAAY,6CAPhB,yBASIJ,GAAW,GATf,6EADc,uBAAC,WAAD,wBAcdK,EACD,GAAE,CAAChB,KAWF,gCACGU,IAAW,SAACO,EAAA,EAAD,KAEZ,SAACX,EAAD,UACGE,EAASU,KAAI,gBAbDC,EAaIC,EAAH,EAAGA,cAAepB,EAAlB,EAAkBA,GAAIqB,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,UAApC,OACZ,2BACE,SAAClB,EAAD,WACE,gBAAKmB,KAhBEJ,EAgBaE,EAff,OAAXF,EACK,+EAED,mCAAN,OAA0CA,IAYCK,IAAI,cAEzC,uBAAIJ,KACJ,sCAAcE,OALPtB,EADG,QAYrB,C,8ECpDYiB,EAAS,WACpB,OACE,+BACE,SAAC,KAAD,CACEQ,MAAM,UACNC,MAAM,MACNC,SAAS,EACTC,UAAU,2BAIjB,C","sources":["api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '51152509db377696be1781d05c6af581';\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p/';\n\nexport const fetchTrending = async () => {\n  const { data } = await axios.get(\n    `trending/movie/day?api_key=${API_KEY}&page=1`\n  );\n  return data;\n};\n\nexport const fetchSearchMovies = async value => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${value}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieDetails = async id => {\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}S&page=1`\n  );\n  return data.results;\n};\n\nexport const getPosterUrl = (path, size) => BASE_POSTER_URL + size + path;\n","import styled from 'styled-components';\n\nexport const PhotoWrapper = styled.div`\n  width: 200px;\n  height: auto;\n`;\nexport const Container = styled.ul`\n  margin-top: 10px;\n`;","import { useState, useEffect } from 'react';\nimport { fetchMovieCredits } from 'api';\nimport { useParams } from 'react-router-dom';\nimport { PhotoWrapper, Container } from './Cast.styled';\nimport { Loader } from 'components/Loader';\nimport { toast } from 'react-hot-toast';\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function getCastInfo() {\n      try {\n        setLoading(true);\n\n        const { cast } = await fetchMovieCredits(id);\n        setCastInfo(cast);\n      } catch {\n        toast.error('This didn`t work. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getCastInfo();\n  }, [id]);\n\n  function getPoster(poster) {\n    if (poster === null) {\n      return 'https://upload.wikimedia.org/wikipedia/commons/6/64/Poster_not_available.jpg';\n    } else {\n      return `https://image.tmdb.org/t/p/w300/${poster}`;\n    }\n  }\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <Container>\n        {castInfo.map(({ original_name, id, profile_path, character }) => (\n          <li key={id}>\n            <PhotoWrapper>\n              <img src={getPoster(profile_path)} alt=\"poster\" />\n            </PhotoWrapper>\n            <p>{original_name}</p>\n            <p>Character:{character}</p>\n          </li>\n        ))}\n      </Container>\n    </>\n  );\n};\nexport default Cast;\n","import { FallingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <FallingLines\n        color=\"#4fa94d\"\n        width=\"100\"\n        visible={true}\n        ariaLabel=\"falling-lines-loading\"\n      />\n    </>\n  );\n};\n"],"names":["axios","API_KEY","fetchTrending","data","fetchSearchMovies","value","fetchMovieDetails","id","fetchMovieCredits","fetchMovieReviews","results","PhotoWrapper","styled","Container","useState","castInfo","setCastInfo","loading","setLoading","useParams","useEffect","cast","toast","getCastInfo","Loader","map","poster","original_name","profile_path","character","src","alt","color","width","visible","ariaLabel"],"sourceRoot":""}